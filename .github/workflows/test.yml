# This workflow build the Docker image with the application 

name: Tests

# Controls when the action will run. 
on:
  # Triggers the workflow on push or pull request events but only for the main branch
  #push:
  #  branches: [ master ]
  #pull_request:
  #  branches: [ master ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # Build the container application
  get_image:
    # The type of runner that the job will run on
    runs-on: ubuntu-20.04
    # Outputs
    outputs:
      c_dbg: ${{ steps.test_c_dbg.outputs.c_dbg }}
      f_dbg: ${{ steps.test_f_dbg.outputs.f_dbg }}
      py_dbg: ${{ steps.test_py_dbg.outputs.py_dbg }}
      c_prof: ${{ steps.test_c_prof.outputs.c_prof }}
      f_prof: ${{ steps.test_f_prof.outputs.f_prof }}
      py_prof: ${{ steps.test_py_prof.outputs.py_prof }}

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # For cross-platform
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2

      # Download image
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Pull image
        run: |
          docker pull ghcr.io/${{ github.actor }}/armhpctrial:latest

      - name: Check out repository code
        uses: actions/checkout@v2

      # Run tests
      - name: Tests
        id: tests
        run: |
          docker run --platform arm64 -v $PWD/arm_hpc_tools_trial:/work --rm -i ghcr.io/${{ github.actor }}/armhpctrial:latest bash ./test.sh > test.out

      # Publish Junit report
      - name: Publish Test Report
        uses: mikepenz/action-junit-report@v3
        if: always() # always run even if the previous step fails
        with:
          report_paths: '**/results/TEST-*.xml'

  badge:
    # The type of runner that the job will run on
    runs-on: ubuntu-20.04
    needs: get_image
    steps:
      - name: Check out repository code
        uses: actions/checkout@v2

      - name: Update badge
        run: |
          mkdir -p .github/badges
          cd .github/badges
          rm -f *.svg
          curl -o os.svg https://img.shields.io/badge/${{ needs.get_image.outputs.os }}-blue
          curl -o gcc.svg https://img.shields.io/badge/gcc-${{ needs.get_image.outputs.gcc }}-blue
          curl -o gfortran.svg https://img.shields.io/badge/gfortran-${{ needs.get_image.outputs.gfortran }}-blue
          curl -o openmpi.svg https://img.shields.io/badge/openmpi-${{ needs.get_image.outputs.openmpi }}-blue
          curl -o python.svg https://img.shields.io/badge/python-${{ needs.get_image.outputs.python }}-blue
          curl -o numpy.svg https://img.shields.io/badge/numpy-${{ needs.get_image.outputs.numpy }}-blue
          curl -o scipy.svg https://img.shields.io/badge/scipy-${{ needs.get_image.outputs.scipy }}-blue
          curl -o mpi4py.svg https://img.shields.io/badge/mpi4py-${{ needs.get_image.outputs.mpi4py }}-blue
          curl -o blas.svg https://img.shields.io/badge/blas-${{ needs.get_image.outputs.blas }}-blue
          git config user.name github-actions
          git config user.email github-actions@github.com
          git add *.svg
          if git commit -m "Update badges"; then
            git push
          fi
